{"version":3,"sources":["CameraControls.js","constants.js","App.js","math/geometry.js","serviceWorker.js","index.js"],"names":["SpaceshipControls","forwardRef","props","ref","gl","useThree","domElement","document","createElement","controls","useMemo","FirstPersonControls","camera","useFrame","_","delta","update","useEffect","movementSpeed","lookSpeed","heightSpeed","lookAt","Vector3","constrainVertical","handleResize","addEventListener","onMouseMove","bind","dispose","object","startPosition","endPosition","orbitalId","zoomVector","group","useRef","fakeCamera","clone","startTime","endTime","orbitalRadius","setFocus","_endPosition","_orbitalId","_orbitalRadius","current","position","sub","Date","now","minDistance","isFocusedOnOrbital","updatePosition","console","log","copy","clock","t","duration","elapsed","scalar","nextPosition","multiplyScalar","add","nextZoomVector","length","moveTowardDestination","useImperativeHandle","attach","args","getPosition","percentComplete","path","getPoint","x","y","Ellipse","useCallback","self","setFromPoints","geometry","getPoints","onUpdate","color","Orbital","orbital","createRef","cameraMarker","radius","semimajor","semiminor","currentTime","percent","focus","Math","sqrt","abs","pow","ellipse","EllipseCurve","PI","Path","id","getWorldPosition","rotation","Euler","onClick","endTimeOfTransition","percentAtEndOfTransition","children","VRBtn","body","appendChild","VRButton","createButton","App","style","background","logarithmicDepthBuffer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.18cd5eed.chunk.js","sourcesContent":["import React, { useRef, useEffect, useMemo, useImperativeHandle, forwardRef } from 'react'\nimport { Vector3, Box3 } from 'three'\nimport { extend, useFrame, useThree } from 'react-three-fiber'\nimport { TRANSITION_TIME } from './constants'\nimport { FirstPersonControls } from 'three/examples/jsm/controls/FirstPersonControls'\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n// import { FlyControls } from 'drei'\n\nconst easeOutQuad = t => t * (2 - t)\n\nconst IDEAL_DISTANCE_FACTOR = 2\n\n\n\n\n\nfunction SpaceshipControlsImpl (props, ref) {\n  const { gl } = useThree()\n  const domElement = document.createElement('div')\n  const controls = useMemo(() => new FirstPersonControls(props.camera, domElement), [props.camera, domElement])\n  // const ref = useRef()\n  // const controls = useRef()\n\n  useFrame((_, delta) => {\n    controls.update(delta)\n  })\n\n  useEffect(() => {\n    controls.movementSpeed = 10\n    controls.lookSpeed = 0.01\n    controls.heightSpeed = true\n    controls.lookAt(new Vector3(0, 0, 0))\n    // controls.rollSpeed = Math.PI / 24\n    controls.constrainVertical = true\n    controls.domElement = gl.domElement\n    controls.handleResize()\n    gl.domElement.addEventListener( 'mousemove', controls.onMouseMove.bind(controls), false );\n  })\n\n  return (\n    <primitive dispose={null} object={controls} ref={ref} {...props} />\n  )\n}\n\nconst SpaceshipControls = forwardRef(SpaceshipControlsImpl)\n\n\n\n\n\n\n\nfunction CameraControls (props, ref) {\n  const group = useRef()\n  const controls = useRef()\n  const { camera, gl } = useThree()\n  const fakeCamera = camera.clone()\n\n  let startPosition\n  let endPosition // normalized (w.r.t <0>)\n  let startTime = 0\n  let endTime = 0\n  let orbitalRadius = 0\n  let orbitalId\n  let zoomVector\n\n  const setFocus = (_endPosition, _orbitalId, _orbitalRadius) => {\n    if (orbitalId === _orbitalId) return // don't re-animate already-focused orbital\n\n    // set the start and end vectors for the camera's centroid and zoom\n    startPosition = group.current.position.clone()\n    endPosition = _endPosition\n      .clone()\n      .sub(startPosition)\n    zoomVector = camera.position.clone()\n\n    // set the animation start time and deadline\n    startTime = Date.now()\n    endTime = startTime + TRANSITION_TIME\n    orbitalId = _orbitalId\n    orbitalRadius = _orbitalRadius\n\n    // set the min zoom distance to the orbital radius (to avoid camera-orbital collision)\n    controls.current.minDistance = orbitalRadius\n  }\n\n  const isFocusedOnOrbital = (_orbitalId) => {\n    return orbitalId === _orbitalId && !endPosition\n  }\n\n  const updatePosition = (position) => {\n    console.log('update to: ', position)\n    group.current.position.copy(position)\n  }\n\n  const moveTowardDestination = () => {\n    const duration = endTime - startTime\n    const elapsed = (Date.now() - startTime) / duration\n    const scalar = easeOutQuad(elapsed)\n\n    if (elapsed < 1) {\n      // move the dolly to the next animated position\n      const nextPosition = endPosition\n        .clone()\n        .multiplyScalar(scalar)\n        .add(startPosition)\n\n      group.current.position.copy(nextPosition)\n\n      // zoom in/out closer to the destination zoom level\n      const nextZoomVector = zoomVector\n        .clone()\n        .multiplyScalar(1 - scalar)\n\n      if (nextZoomVector.length() > controls.current.minDistance * IDEAL_DISTANCE_FACTOR) {\n        // zoom in only if the magnitude doesn't exceed the ideal viewing distance\n        fakeCamera.position.copy(nextZoomVector)\n      }\n    } else {\n      zoomVector = null\n      startPosition = null\n      endPosition = null\n      startTime = 0\n      endTime = 0\n    }\n  }\n\n  const getZoom = () => {\n    const { minDistance, maxDistance } = controls.current\n    const currDistance = camera.position.length()\n    const percent = (currDistance - minDistance) / (maxDistance - minDistance)\n    // var factor = zoomDistance / currDistance\n\n    // console.log('currDist: ', currDistance, percent, maxDistance)\n  }\n\n  const { clock } = useThree()\n\n  useFrame(() => {\n    if (endPosition) {\n      moveTowardDestination()\n    }\n    // getZoom()\n    camera.copy(fakeCamera)\n    // controls.current.update()\n  })\n\n  useImperativeHandle(ref, () => ({\n    setFocus,\n    isFocusedOnOrbital,\n    updatePosition\n  }))\n\n  useEffect(() => {\n    group.current.add(camera)\n  })\n\n  return (\n    <group ref={group}>\n      <mesh>\n        <boxGeometry attach=\"geometry\" args={[1, 1, 1]} />\n        <meshNormalMaterial attach=\"material\" />\n      </mesh>\n      <SpaceshipControls ref={controls} camera={fakeCamera} />\n    </group>\n  )\n}\n\nexport default forwardRef(CameraControls)\n","export const TRANSITION_TIME = 1000\n","import React, { useRef, useMemo, useCallback, useEffect, createRef, useImperativeHandle } from 'react'\nimport { Euler, Vector3, EllipseCurve, Path } from 'three'\nimport { Canvas, useFrame, useThree } from 'react-three-fiber'\nimport CameraControls from './CameraControls'\nimport { TRANSITION_TIME } from './constants'\nimport './App.css'\nimport { getFocus } from './math/geometry'\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton.js'\n\nconst initPosition = 50\n\nfunction getPosition (percentComplete, path) {\n  // const rad = (percentComplete * 360) * (Math.PI / 180)\n  const { x, y } = path.getPoint(percentComplete)\n\n  return new Vector3(x, y, 0)\n}\n\n\nfunction Ellipse (props) {\n  const update = useCallback(self => {\n    self.setFromPoints(props.geometry.getPoints(50))\n  }, [])\n\n  return (\n    <line>\n      <bufferGeometry attach=\"geometry\" onUpdate={update} />\n      <lineBasicMaterial attach=\"material\" color=\"hotpink\" />\n    </line>\n  )\n}\n\n\nfunction Orbital (props) {\n  const orbital = createRef()\n  const cameraMarker = createRef() // marks the future camera position when focus changes\n  const { radius, duration, semimajor, semiminor } = props\n\n  let currentTime = Date.now()\n  let endTime = currentTime + duration\n  let percent = 0\n\n  const focus = getFocus(semimajor, semiminor)\n  const ellipse = useMemo(() => new EllipseCurve(\n    0,  focus,            // ax, aY\n    semimajor, semiminor,\n    0,  2 * Math.PI,  // aStartAngle, aEndAngle\n    false,            // aClockwise\n    0                 // aRotation\n  ), [])\n  const path = new Path(ellipse.getPoints(50))\n\n\n  useFrame(() => {\n    currentTime = Date.now()\n    percent = (endTime - currentTime) / duration\n\n    const position = getPosition(percent, path)\n    const controls = props.controls.current\n\n    if (percent <= 0) {\n      percent = 0\n      endTime = currentTime + duration\n    }\n\n    orbital.current.position.copy(position)\n\n    if (controls.isFocusedOnOrbital(props.id)) {\n      controls.updatePosition(orbital.current.getWorldPosition())\n    }\n  })\n\n  const onClick = () => {\n    const endTimeOfTransition = currentTime + TRANSITION_TIME\n    const controls = props.controls.current\n\n    let percentAtEndOfTransition = ((endTime - endTimeOfTransition) / duration) % 1\n\n    if (percentAtEndOfTransition < 0) {\n      percentAtEndOfTransition += 1\n    }\n\n    const position = getPosition(percentAtEndOfTransition, ellipse)\n\n    cameraMarker.current.position.copy(position)\n    controls.setFocus(cameraMarker.current.getWorldPosition(), props.id, props.radius)\n  }\n\n  const rotation = new Euler( 1, 0, 0, 'XYZ' ) // barycentric rotation (relative to ecliptic plane)\n\n  return (\n    <group rotation={rotation}>\n      <Ellipse geometry={ellipse} />\n\n      <group ref={cameraMarker} />\n      <group onClick={onClick} ref={orbital}>\n        {/* <axesHelper args={[100]} /> */}\n        <mesh>\n          <sphereGeometry attach=\"geometry\" args={[props.radius, 32, 32]} />\n          <meshNormalMaterial attach=\"material\" />\n        </mesh>\n        {props.children}\n      </group>\n    </group>\n  )\n}\n\nfunction VRBtn () {\n  const { gl } = useThree()\n\n  useEffect(() => {\n    document.body.appendChild( VRButton.createButton( gl.domElement ) )\n  })\n\n  return <group />\n}\n\nexport default function App () {\n  const controls = createRef()\n\n  return (\n    <Canvas style={{ background: '#272730' }} camera={{\n\n      position: new Vector3(initPosition, initPosition, initPosition)\n    }} gl={{ logarithmicDepthBuffer: true }}>\n      <gridHelper args={[100, 5]} />\n      <mesh>\n        <sphereGeometry attach=\"geometry\" args={[2, 32, 32]} />\n        <meshBasicMaterial attach=\"material\" color={0xFFFEEE} />\n      </mesh>\n      <CameraControls ref={controls} />\n\n      <Orbital controls={controls} duration={30000} radius={30} radius={2} semimajor={11} semiminor={10} id=\"earth\">\n        {/* <Orbital controls={controls} duration={6000} radius={20} radius={2} id=\"moon\" /> */}\n      </Orbital>\n      <Orbital controls={controls} duration={4000} radius={80} radius={3} semimajor={25} semiminor={23} id=\"venus\" />\n      {/* <Controls /> */}\n      <VRBtn />\n    </Canvas>\n  )\n}\n","/**\n * Returns the distance from the foci to the center of an ellipse.\n *\n * @param {Number} x - semimajor axis\n * @param {Number} y - semiminor axis\n * @returns {Number} focus of ellipse\n */\nexport function getFocus (x, y) {\n  return Math.sqrt(Math.abs(Math.pow(x, 2) - Math.pow(y, 2)))\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n// import './TestWorld'\n"],"sourceRoot":""}